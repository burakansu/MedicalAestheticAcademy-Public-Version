// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VeronaAkademi.Data.Context;

#nullable disable

namespace VeronaAkademi.Data.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20230714141937_75")]
    partial class _75
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Advisor", b =>
                {
                    b.Property<int>("AdvisorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvisorId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AdvisorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Advisor");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.AdvisorCourseRelation", b =>
                {
                    b.Property<int>("AdvisorCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvisorCourseRelationId"));

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("AdvisorCourseRelationId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CourseId");

                    b.ToTable("AdvisorCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.ArayuzKisitlama", b =>
                {
                    b.Property<int>("ArayuzKisitlamaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArayuzKisitlamaId"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArayuzKisitlamaId");

                    b.ToTable("ArayuzKisitlama");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Departman", b =>
                {
                    b.Property<int>("DepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanId"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmanId");

                    b.ToTable("Departman");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Kisitlama", b =>
                {
                    b.Property<int>("KisitlamaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KisitlamaId"));

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSpace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetDivId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KisitlamaId");

                    b.ToTable("Kisitlama");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.KisitlamaControllerAction", b =>
                {
                    b.Property<int>("KisitlamaControllerActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KisitlamaControllerActionId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KisitlamaId")
                        .HasColumnType("int");

                    b.HasKey("KisitlamaControllerActionId");

                    b.HasIndex("KisitlamaId");

                    b.ToTable("KisitlamaControllerAction");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Personel", b =>
                {
                    b.Property<int>("PersonelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelId"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Eposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonelTipId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unvan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonelId");

                    b.HasIndex("DepartmanId");

                    b.HasIndex("PersonelTipId");

                    b.ToTable("Personel");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.PersonelArayuzKisitlama", b =>
                {
                    b.Property<int>("PersonelArayuzKisitlamaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelArayuzKisitlamaId"));

                    b.Property<int>("ArayuzKisitlamaId")
                        .HasColumnType("int");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int");

                    b.HasKey("PersonelArayuzKisitlamaId");

                    b.HasIndex("ArayuzKisitlamaId");

                    b.HasIndex("PersonelId");

                    b.ToTable("PersonelArayuzKisitlama");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.PersonelKisitlamaRelation", b =>
                {
                    b.Property<int>("PersonelKisitlamaRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelKisitlamaRelationId"));

                    b.Property<int>("KisitlamaId")
                        .HasColumnType("int");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int");

                    b.HasKey("PersonelKisitlamaRelationId");

                    b.HasIndex("KisitlamaId");

                    b.HasIndex("PersonelId");

                    b.ToTable("PersonelKisitlamaRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.PersonelTip", b =>
                {
                    b.Property<int>("PersonelTipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelTipId"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonelTipId");

                    b.ToTable("PersonelTip");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("BasketId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ProductId");

                    b.ToTable("Basket");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryGroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CategoryGroup", b =>
                {
                    b.Property<int>("CategoryGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryGroupId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("CategoryGroupId");

                    b.ToTable("CategoryGroup");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerAdvisorRelation", b =>
                {
                    b.Property<int>("CustomerAdvisorRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerAdvisorRelationId"));

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerAdvisorRelationId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAdvisorRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerCourseRelation", b =>
                {
                    b.Property<int>("CustomerCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerCourseRelationId"));

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("CustomerCourseRelationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerLessonRelation", b =>
                {
                    b.Property<int>("CustomerLessonRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerLessonRelationId"));

                    b.Property<int>("Completed")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("CustomerLessonRelationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LessonId");

                    b.ToTable("CustomerLessonRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerPackageRelation", b =>
                {
                    b.Property<int>("CustomerPackageRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerPackageRelationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.HasKey("CustomerPackageRelationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.ToTable("CustomerPackageRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerPracticeLessonRelation", b =>
                {
                    b.Property<int>("CustomerPracticeLessonRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerPracticeLessonRelationId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PracticeLessonId")
                        .HasColumnType("int");

                    b.HasKey("CustomerPracticeLessonRelationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PracticeLessonId");

                    b.ToTable("CustomerPracticeLessonRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Lecturer", b =>
                {
                    b.Property<int>("LecturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LecturerId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("LecturerId");

                    b.ToTable("Lecturer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.LecturerCourseRelation", b =>
                {
                    b.Property<int>("LecturerCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LecturerCourseRelationId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("LecturerCourseRelationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturerCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("PackageId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PackageAdvisorRelation", b =>
                {
                    b.Property<int>("PackageAdvisorRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageAdvisorRelationId"));

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageAdvisorRelationId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageAdvisorRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PackageCourseRelation", b =>
                {
                    b.Property<int>("PackageCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageCourseRelationId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageCourseRelationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("PackageId");

                    b.ToTable("PackageCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PackagePracticeLessonRelation", b =>
                {
                    b.Property<int>("PackagePracticeLessonRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackagePracticeLessonRelationId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PracticeLessonId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PackagePracticeLessonRelationId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PracticeLessonId");

                    b.ToTable("PackagePracticeLessonRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PracticeLesson", b =>
                {
                    b.Property<int>("PracticeLessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PracticeLessonId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("PracticeLessonId");

                    b.ToTable("PracticeLesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PracticeLessonCourseRelation", b =>
                {
                    b.Property<int>("PracticeLessonCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PracticeLessonCourseRelationId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("PracticeLessonId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("PracticeLessonCourseRelationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("PracticeLessonId");

                    b.ToTable("PracticeLessonCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PracticeLessonGallery", b =>
                {
                    b.Property<int>("PracticeLessonGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PracticeLessonGalleryId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PracticeLessonId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("PracticeLessonGalleryId");

                    b.HasIndex("PracticeLessonId");

                    b.ToTable("PracticeLessonGallery");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("ProfessionId");

                    b.ToTable("Profession");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.ProfessionCourseRelation", b =>
                {
                    b.Property<int>("ProfessionCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionCourseRelationId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("ProfessionCourseRelationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ProfessionCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<int>("StarRate")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LessonId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<int>("SkillGroupId")
                        .HasColumnType("int");

                    b.HasKey("SkillId");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.SkillCourseRelation", b =>
                {
                    b.Property<int>("SkillCourseRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillCourseRelationId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("SkillCourseRelationId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.SkillGroup", b =>
                {
                    b.Property<int>("SkillGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillGroupId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("SkillGroupId");

                    b.ToTable("SkillGroup");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestEntity");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Trailer", b =>
                {
                    b.Property<int>("TrailerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrailerId"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EklemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("GuncellemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Silindi")
                        .HasColumnType("bit");

                    b.Property<int?>("Sira")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrailerId");

                    b.HasIndex("CourseId");

                    b.ToTable("Trailer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Advisor", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.AdvisorCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Advisor", "Advisor")
                        .WithMany("AdvisorCourseRelation")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("AdvisorCourseRelation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.KisitlamaControllerAction", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Base.Kisitlama", "Kisitlama")
                        .WithMany("KisitlamaControllerAction")
                        .HasForeignKey("KisitlamaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kisitlama");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Personel", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Base.Departman", "Departman")
                        .WithMany("Personel")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Base.PersonelTip", "PersonelTip")
                        .WithMany("Personel")
                        .HasForeignKey("PersonelTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");

                    b.Navigation("PersonelTip");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.PersonelArayuzKisitlama", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Base.ArayuzKisitlama", "ArayuzKisitlama")
                        .WithMany("PersonelArayuzKisitlama")
                        .HasForeignKey("ArayuzKisitlamaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Base.Personel", "Personel")
                        .WithMany("PersonelArayuzKisitlama")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArayuzKisitlama");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.PersonelKisitlamaRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Base.Kisitlama", "Kisitlama")
                        .WithMany("PersonelKisitlamaRelation")
                        .HasForeignKey("KisitlamaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Base.Personel", "Personel")
                        .WithMany("PersonelKisitlamaRelation")
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kisitlama");

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Basket", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Lesson", null)
                        .WithMany("Basket")
                        .HasForeignKey("LessonId");

                    b.HasOne("VeronaAkademi.Data.Entities.Product", "Product")
                        .WithMany("Basket")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Category", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.CategoryGroup", "CategoryGroup")
                        .WithMany("Category")
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Category", "Parent")
                        .WithMany("SubCategory")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CategoryGroup");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Course", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Currency", "Currency")
                        .WithMany("Course")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Customer", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerAdvisorRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Advisor", "Advisor")
                        .WithMany("CustomerAdvisorRelation")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerLessonRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerPackageRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CustomerPracticeLessonRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.PracticeLesson", "PracticeLesson")
                        .WithMany()
                        .HasForeignKey("PracticeLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PracticeLesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.LecturerCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("LecturerCourseRelation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Lecturer", "Lecturer")
                        .WithMany("LecturerCourseRelation")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Lesson", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("Lesson")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Currency");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Message", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Advisor", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Order", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Package", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PackageAdvisorRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Advisor", "Advisor")
                        .WithMany("PackageAdvisorRelation")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Package", "Package")
                        .WithMany("PackageAdvisorRelation")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PackageCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("PackageCourseRelation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Package", "Package")
                        .WithMany("PackageCourseRelation")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PackagePracticeLessonRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Package", "Package")
                        .WithMany("PackagePracticeLessonRelation")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.PracticeLesson", "PracticeLesson")
                        .WithMany("PackagePracticeLessonRelation")
                        .HasForeignKey("PracticeLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("PracticeLesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PracticeLessonCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("PracticeLessonCourseRelation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.PracticeLesson", "PracticeLesson")
                        .WithMany("PracticeLessonCourseRelation")
                        .HasForeignKey("PracticeLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PracticeLesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PracticeLessonGallery", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.PracticeLesson", "PracticeLesson")
                        .WithMany()
                        .HasForeignKey("PracticeLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticeLesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.ProfessionCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("ProfessionCourseRelation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Profession", "Profession")
                        .WithMany("ProfessionCourseRelation")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Review", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Customer", "Customer")
                        .WithMany("Review")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Lesson", "Lesson")
                        .WithMany("Reviews")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Skill", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.SkillGroup", "SkillGroup")
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillGroup");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.SkillCourseRelation", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("SkillCourseRelation")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VeronaAkademi.Data.Entities.Skill", "Skill")
                        .WithMany("SkillCourseRelation")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Trailer", b =>
                {
                    b.HasOne("VeronaAkademi.Data.Entities.Course", "Course")
                        .WithMany("Trailer")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Advisor", b =>
                {
                    b.Navigation("AdvisorCourseRelation");

                    b.Navigation("CustomerAdvisorRelation");

                    b.Navigation("PackageAdvisorRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.ArayuzKisitlama", b =>
                {
                    b.Navigation("PersonelArayuzKisitlama");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Departman", b =>
                {
                    b.Navigation("Personel");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Kisitlama", b =>
                {
                    b.Navigation("KisitlamaControllerAction");

                    b.Navigation("PersonelKisitlamaRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.Personel", b =>
                {
                    b.Navigation("PersonelArayuzKisitlama");

                    b.Navigation("PersonelKisitlamaRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Base.PersonelTip", b =>
                {
                    b.Navigation("Personel");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Category", b =>
                {
                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.CategoryGroup", b =>
                {
                    b.Navigation("Category");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Course", b =>
                {
                    b.Navigation("AdvisorCourseRelation");

                    b.Navigation("LecturerCourseRelation");

                    b.Navigation("Lesson");

                    b.Navigation("PackageCourseRelation");

                    b.Navigation("PracticeLessonCourseRelation");

                    b.Navigation("ProfessionCourseRelation");

                    b.Navigation("SkillCourseRelation");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Currency", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Customer", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Lecturer", b =>
                {
                    b.Navigation("LecturerCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Lesson", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Package", b =>
                {
                    b.Navigation("PackageAdvisorRelation");

                    b.Navigation("PackageCourseRelation");

                    b.Navigation("PackagePracticeLessonRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.PracticeLesson", b =>
                {
                    b.Navigation("PackagePracticeLessonRelation");

                    b.Navigation("PracticeLessonCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Product", b =>
                {
                    b.Navigation("Basket");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Profession", b =>
                {
                    b.Navigation("ProfessionCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.Skill", b =>
                {
                    b.Navigation("SkillCourseRelation");
                });

            modelBuilder.Entity("VeronaAkademi.Data.Entities.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
